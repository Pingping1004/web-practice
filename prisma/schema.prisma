generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  User
  Staff
  Admin
}

enum AuthProvider {
  Local
  Google
}

enum MfaMethod {
  Totp
  Email
  None
}

enum DeviceStatus {
  Trusted
  Banned
  Unverified
}

enum TrustLevel {
  Blacklist
  Basic
  Privilege
  Admin
}

enum BanSeverity {
  Permanent
  High
  Medium
  Low
}

enum SessionStatus {
  Active
  Revoked
  Expired
}

enum AuthEventType {
  LOGIN_SUCCESS
  LOGIN_FAILED
  MFA_AUTH
  PASSWORD_RESET
  SIGNUP
}

model User {
  userId            String          @id @default(uuid())
  username          String          @unique
  email             String          @unique
  password          String?
  createdAt         DateTime        @default(now())
  role              Role            @default(User)
  provider          AuthProvider    @default(Local)

  oauthAccounts     OAuthAccount[]
  sessions          Session[]
  userDevice        UserDevice[]
  resetTokens       ResetPassword[]
  authEventLog      AuthEventLog[]

  mfaEnabled        Boolean         @default(false)
  mfaSecret         String?
  mfaMethod         MfaMethod       @default(None)

  @@index([userId])
  @@index([email])
  @@index([username])
}

model OAuthAccount {
  oauthId           String          @id @default(uuid())
  provider          AuthProvider
  providerUserId    String
  userId            String
  user              User            @relation(fields: [userId], references: [userId])

  @@unique([provider, providerUserId])

  @@index([oauthId])
  @@index([userId])
}

model Session {
  sessionId         String          @id @default(uuid())
  jti               String          @unique
  hashedToken       String         @unique
  userId            String
  deviceId          String
  userDeviceId      String          // Link to device table as foreign key

  // JWT claims
  expiresAt         DateTime
  issuedAt          DateTime        @default(now())
  lastUsedAt        DateTime        @default(now())

  // Session state
  status            SessionStatus   @default(Active)
  revokedAt         DateTime?
  revokedReason     String?

  ipAddress         String
  userAgent         String?
  mfaVerified       Boolean         @default(false)
  mfaVerifiedAt     DateTime?

  user              User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  device            Device          @relation(fields: [deviceId], references: [deviceId], onDelete: Cascade)
  userDevice        UserDevice      @relation(fields: [userDeviceId], references: [userDeviceId], onDelete: Cascade)

  @@index([userDeviceId])
  @@index([userId])
  @@index([expiresAt])
}

model Device {
  deviceId          String          @id @default(uuid())
  deviceHash        String
  deviceName        String?
  ipAddress         String
  isBanned          Boolean         @default(false)

  lastUsedAt        DateTime @default(now())
  createdAt         DateTime @default(now())

  userDevices       UserDevice[]
  sessionService    Session[]

  @@index([deviceHash])
  @@index([ipAddress])
}

model UserDevice {
  userDeviceId      String            @id @default(uuid())
  userId            String
  deviceId          String

  deviceStatus      DeviceStatus
  trustLevel        TrustLevel
  banSeverity       BanSeverity?

  isRevoked         Boolean         @default(false)
  revokedAt         DateTime?
  revokedReason     String?

  mfaLastVerifiedAt    DateTime?
  isMfaTrusted         Boolean         @default(false)
  mfaTrustExpiresAt    DateTime?

  expiresAt         DateTime?
  lastUsedAt        DateTime        @default(now())
  createdAt         DateTime        @default(now())

  user              User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  device            Device          @relation(fields: [deviceId], references: [deviceId], onDelete: Cascade)
  sessions          Session[]

  @@index([userId, deviceId])
}

model ResetPassword {
  resetTokenId      String          @id @default(uuid())
  userId            String
  tokenHash         String          @unique
  expiresAt         DateTime
  usedAt            DateTime?
  createdAt         DateTime        @default(now())

  user              User            @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model AuthEventLog {
  authLogId         String          @id @default(uuid())
  userId            String
  eventType         AuthEventType
  ipAddress         String
  userAgent         String?
  createdAt         DateTime        @default(now())

  user              User            @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([eventType])
}